asr_model:
  optimizer: 
    type: 'Adadelta'                          # Optimizer used for training (adam)
    learning_rate: 1.0                        # Learning rate for opt
    joint_ctc: 0.5                            # Weight for joint CTC training (0:disabled CTC, 1:only CTC) 

  encoder:                                    ########## Encoder
    enc_type: 'VGGBiRNN'                      # Encoder type (RNN: Normal RNN encoder /BiRNN: Bidirection / VGGBiRNN : BiRNN w/ VGG extractor)
    sample_rate: '1_1_1'                  # Sample rate between layers (reduce time dimension)
    sample_style: 'drop'                      # Sample by drop (dropping frame) or concat (concatenating them)
    dim: '256_256_256'                # Dimension of each hidden layer
    dropout: '0.5_0.5_0.5'                      # Dropout between each hidden layer
    rnn_cell: 'LSTM'                          # RNN cell used in encoder, should be implemented in Pytorch
  attention:                                  ########## Attention : http://www.aclweb.org/anthology/D15-1166 section 3.1 for more details
    att_mode: 'loc'                           # Attention mode (dot/loc)
    dim: 256                                  # The dimension of attention layer, only works when proj==True
    proj: True                                # Use a single layer to project encoded feature
    num_head: 1                               # Number of heads for multi-head attention (UNTESTED)
  decoder:
    dim: 256
    layer: 1
    dropout: 0.0
    rnn_cell: 'LSTMCell'                      # Only LSTMCell is availible now.

clm:
  enable: False                               # Enable adversarial training between ASR and CLM

solver:
  # Data options
  dataset: 'tsmlmdb'                         # 
  data_path: '/media/zhong-yi/DATA1'                # Source data path
  n_jobs: 4                                  # Subprocess used for torch Dataloader
  max_timestep: 3000                          # Max length for audio feature (0 for no restriction)
  max_label_len: 400                          # Max length for output sequence (0 for no restriction)
  # Training options
  train_set: ['src-train.txt', 'tgt-train.txt'] #
  batch_size: 4                              # training batch size
  apex: True                                  # Use APEX (see https://github.com/NVIDIA/apex for more details)
  total_steps: 2400000                         # total steps for training                         
  tf_start: 1.0                               # teacher forcing rate during training will be linearly
  tf_end: 1.0                                 # decaying from upperbound to lower bound for each epoch
  # Validation options
  dev_set: ['src-val.txt', 'tgt-val.txt']                      
  dev_batch_size: 16
  dev_step: 8000
  # Decoding options
  test_set: ['src-val.txt', 'tgt-val.txt']
  max_decode_step_ratio: 0.1
  decode_beam_size: 20
  decode_ctc_weight: 0.5
  decode_lm_weight: 0.0

